# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OHVHxTYtkXav9UtR-6rv9D4_RyWyhgJu

# Heart Disease Prediction Model

Importing libraries and Functions
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data collection and processing

"""

#Loading the csvdata to a pandas dataframe
heart_data = pd.read_csv('/content/data.csv')

#print first five rows of data frame
heart_data.head()

#print last five rows of data set
heart_data.tail()

#no.of rows and column
heart_data.shape

# getting some info abt the data
heart_data.info()

#checking missing values
heart_data.isnull().sum()

#statistical measure of the data
heart_data.describe()

#Checking the distribution of target variable
heart_data['target'].value_counts()

"""1-> Defective heart

0_>non deafective heart

Splitting the feature and target
"""

x = heart_data.drop(columns='target',axis=1)
y = heart_data['target']

print(x)

print(y)

"""Splitting the data into traning and test data"""

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,stratify=y,random_state=2)

print (x.shape,x_train.shape,x_test.shape)

"""Model Training
Logestic Regression Model
"""

model = LogisticRegression()

#training logisticregression model with Training data
model.fit(x_train,y_train)

"""Model Evaluation

Accuracy Score
"""

#Accuracy on training data

x_train_prediction = model.predict(x_train)
training_data_accuracy = accuracy_score(x_train_prediction,y_train)

print('Accuracy on Training data:',training_data_accuracy)

#accuracy on test data
X_test_prediction = model.predict(x_test)
test_data_accuracy = accuracy_score(X_test_prediction,y_test)

print('Accuracy on Test data :',test_data_accuracy)

"""Building a predictive system"""

input_data = (41,0,1,130,204,0,0,172,0,1.4,2,0,2)
#change the input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshape the numpy array as we are predicting for only on instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]==0):
  print('The person does not have a heart disease')
else:
  print('The person has heart disease')

input_data = (62,0,0,140,268,0,0,160,0,3.6,0,2,2)
#change the input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshape the numpy array as we are predicting for only on instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]==0):
  print('The person does not have a heart disease')
else:
  print('The person has heart disease')